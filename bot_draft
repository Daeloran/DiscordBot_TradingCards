import discord
from discord.ext import commands
from cards import Card, available_cards, User

intents = discord.Intents.all()
bot = commands.Bot(command_prefix='!',intents=intents)

#IDEES : commande pour afficher une carte en particulier

@bot.event
async def on_ready():
    print('Bot is ready!')

users = {}  # Dictionnaire pour stocker les informations des utilisateurs
cards_available = {}  # Dictionnaire pour stocker les cartes disponibles

"""
# Commande pour permettre aux utilisateurs de s'inscrire
@bot.command()
async def register(ctx):
    if ctx.author.id in users:
        await ctx.send("Tu es déjà inscrit.")
        return

    users[ctx.author.id] = User(ctx.author.name)
    await ctx.send(f"{ctx.author.mention} est maintenant inscrit.")
"""


# Commande pour afficher les cartes existantes
@bot.command()
async def show_available_cards(ctx):
    for card in available_cards:
        embed = discord.Embed(title=card.name, description=card.rarity, color=discord.Color.blue())
        embed.set_image(url=card.image_url)
        await ctx.send(embed=embed)


# Commande pour permettre aux utilisateurs de rechercher une carte
@bot.command()
async def search_card(ctx, card_identifier):
    user = users.get(ctx.author.id)
    if user is None:
        user = User(ctx.author.name)
        users[ctx.author.id] = user

    for card in available_cards:
        if card.card_number == card_identifier or (card.name + " " + card.rarity) == card_identifier:
            if card_identifier in [search[0] for search in user.searches]:
                await ctx.send("Tu recherches déjà cette carte.")
                return

            user.searches.append((card.card_number, card.name, card.rarity))
            await ctx.send(f"{ctx.author.mention} recherche la carte '{card.name}' ({card.rarity}).")
            return

    await ctx.send("La carte spécifiée n'existe pas.")

""""
@bot.command()
async def search_card(ctx, card_name):
    user = users.get(ctx.author.id)
    if user is None:
        await ctx.send("Tu dois d'abord t'inscrire en utilisant la commande `!register`.")
        return

    if card_name in user.searches:
        await ctx.send("Tu recherches déjà cette carte.")
        return

    user.searches.append(card_name)
    await ctx.send(f"{ctx.author.mention} recherche la carte '{card_name}'. Les autres utilisateurs peuvent lui proposer des échanges en utilisant la commande `!propose_trade`.")

@bot.command()
async def search_card(ctx, card_name):
    user = users.get(ctx.author.id)
    if user is None:
        user = User(ctx.author.name)
        users[ctx.author.id] = user

    if card_name in user.searches:
        await ctx.send("Tu recherches déjà cette carte.")
        return

    user.searches.append(card_name)
    await ctx.send(f"{ctx.author.mention} recherche la carte '{card_name}'.")
"""

# Commande pour permettre aux utilisateurs de rechercher une carte en échange d'autres cartes spécifiques
@bot.command()
async def search_card_for_trade(ctx, card_identifier, *trade_cards):
    user = users.get(ctx.author.id)
    if user is None:
        user = User(ctx.author.name)
        users[ctx.author.id] = user

    for card in available_cards:
        if card.card_number == card_identifier or (card.name + " " + card.rarity) == card_identifier:
            if card_identifier in [search[0] for search in user.searches]:
                await ctx.send("Tu recherches déjà cette carte.")
                return

            trade_cards = list(trade_cards)
            user.searches.append((card.card_number, card.name, card.rarity, trade_cards))
            await ctx.send(f"{ctx.author.mention} recherche la carte '{card.name}' ({card.rarity}) en échange de {', '.join(trade_cards)}.")
            return

    await ctx.send("La carte spécifiée n'existe pas.")


@bot.command()
async def trade_cards(ctx, *trade_cards):
    user = users.get(ctx.author.id)
    if user is None:
        user = User(ctx.author.name)
        users[ctx.author.id] = user

    trade_cards = list(trade_cards)
    user.trades.extend(trade_cards)
    await ctx.send(f"{ctx.author.mention} propose en échange : {', '.join(trade_cards)}.")

"""
@bot.command()
async def search_card_for_trade(ctx, card_name, *trade_cards):
    user = users.get(ctx.author.id)
    if user is None:
        user = User(ctx.author.name)
        users[ctx.author.id] = user

    if card_name in user.searches:
        await ctx.send("Tu recherches déjà cette carte.")
        return

    trade_cards = list(trade_cards)
    user.searches.append((card_name, trade_cards))
    await ctx.send(f"{ctx.author.mention} recherche la carte '{card_name}' en échange de {', '.join(trade_cards)}.")


# Commande pour permettre aux utilisateurs de signaler qu'ils échangent une ou plusieurs cartes
@bot.command()
async def trade_cards(ctx, *trade_cards):
    user = users.get(ctx.author.id)
    if user is None:
        user = User(ctx.author.name)
        users[ctx.author.id] = user

    trade_cards = list(trade_cards)
    user.trades.extend(trade_cards)
    await ctx.send(f"{ctx.author.mention} propose en échange : {', '.join(trade_cards)}.")
"""

"""
# Commande pour permettre aux utilisateurs de proposer un échange en réponse à une recherche
@bot.command()
async def propose_trade(ctx, target_user: discord.User, card_name):
    user = users.get(target_user.id)
    if user is None:
        await ctx.send(f"{target_user.mention} n'est pas inscrit.")
        return

    if card_name not in user.searches:
        await ctx.send(f"{target_user.mention} ne recherche pas cette carte.")
        return

    # Code pour valider l'échange et effectuer les modifications nécessaires
    # (par exemple, retirer la carte du propriétaire actuel et la donner à l'autre utilisateur)
    # Recherche de la carte dans les possessions de l'auteur de la proposition
    proposer = users.get(ctx.author.id)
    if proposer is None:
        await ctx.send("Tu dois d'abord t'inscrire en utilisant la commande `!register`.")
        return

    for card in proposer.cards:
        if card.name == card_name:
            # Retirer la carte du propriétaire actuel
            proposer.cards.remove(card)

            # Ajouter la carte à l'autre utilisateur
            user.cards.append(card)

            # Retirer la recherche de la carte de l'autre utilisateur
            user.searches.remove(card_name)

            await ctx.send(f"{ctx.author.mention} et {target_user.mention} ont conclu un échange pour la carte '{card_name}'.")
            return

    await ctx.send(f"{ctx.author.mention}, tu ne possèdes pas la carte '{card_name}' pour pouvoir l'échanger.")

    #await ctx.send(f"{ctx.author.mention} propose un échange à {target_user.mention} pour la carte '{card_name}'.")


@bot.command()
async def propose_trade(ctx, other_user: discord.User, card: str):
    # Code pour proposer un échange avec l'autre utilisateur et la carte spécifiée
    await ctx.send(f"Proposition d'échange envoyée à {other_user.mention} pour la carte {card}.")

@bot.command()
async def accept_trade(ctx, other_user: discord.User, card: str):
    # Code pour accepter un échange proposé par l'autre utilisateur pour la carte spécifiée
    await ctx.send(f"Échange accepté avec {other_user.mention} pour la carte {card}.")
"""

bot.run('MTEyMjg5MTU0OTk0NTExNDc3NA.GGosKV.wkeMfHKoJ-iwgoa-Qh9TBVwlaUBfiu-aoqcmNI')
